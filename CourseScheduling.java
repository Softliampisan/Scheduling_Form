/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Classes;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
/**
 *
 * @author softliampisan
 */
public class CourseScheduling extends javax.swing.JFrame {

    Connection con;
    Statement stmt;
    ResultSet rs;
    int curRow = 0;

    
    public CourseScheduling() {
        initComponents();
        DoConnect();
        this.setDefaultCloseOperation(CourseScheduling.DISPOSE_ON_CLOSE);
    }
    
    
    public void DoConnect() {
        try {
            //connection to HS Classes database
            String host = "jdbc:derby://localhost:1527/HS Classes";
            String uName = "Flexblock";
            String uPass = "Project123";
            con = DriverManager.getConnection(host, uName, uPass);
            
            stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String SQL = "SELECT * FROM CourseScheduling";
            rs = stmt.executeQuery(SQL);
            
            rs.next();
            //connect each column to the course scheduling form
            int CourseNumber_col = rs.getInt("CourseNumber");
            String CourseNumber = Integer.toString(CourseNumber_col);
            String course_name = rs.getString("Course_Name");
            String teacher_name = rs.getString("Teacher_Name");
            int studentid_col = rs.getInt("student_ID");
            String student_id = Integer.toString(studentid_col);
            String student_name = rs.getString("Student_Name");
            //display each column
            textCourseNum.setText(CourseNumber);
            textCourseName.setText(course_name);
            textTeacher.setText(teacher_name);
            textStudentID.setText(student_id);
            textStudentName.setText(student_name);
            
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(this, err.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        textCourseNum = new javax.swing.JTextField();
        textCourseName = new javax.swing.JTextField();
        textTeacher = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        textStudentID = new javax.swing.JTextField();
        btnFirst = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textStudentName = new javax.swing.JTextField();
        displayBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(190, 230, 244));

        jLabel1.setText("Teacher");

        btnFirst.setText("First");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setText("Last");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Record");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Record");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnNew.setText("New Record");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save New Record");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel New Record");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setText("Course # and Course Name");

        jLabel3.setText("Student ID   ");

        jLabel4.setText("Student Name");

        displayBtn.setBackground(new java.awt.Color(255, 255, 255));
        displayBtn.setFont(new java.awt.Font("Phosphate", 0, 18)); // NOI18N
        displayBtn.setForeground(new java.awt.Color(255, 102, 102));
        displayBtn.setText("Display Database");
        displayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Palatino", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Admin and Teacher's Page");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(textCourseNum, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(textCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(displayBtn)
                                    .addComponent(jLabel2)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(textStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(btnFirst))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(btnPrevious)
                                .addGap(18, 18, 18)
                                .addComponent(btnNext)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLast))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnUpdate)
                        .addGap(12, 12, 12)
                        .addComponent(btnNew)
                        .addGap(26, 26, 26)
                        .addComponent(btnDelete))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(btnSave)
                        .addGap(38, 38, 38)
                        .addComponent(btnCancel)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textCourseNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFirst)
                    .addComponent(btnPrevious)
                    .addComponent(btnNext)
                    .addComponent(btnLast))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnNew)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtnActionPerformed
        new displayDatabase().setVisible(true); 
    }//GEN-LAST:event_displayBtnActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        try {
            if (rs.next()) {
                //get new information to match the student's courses
                int CourseNumber_col = rs.getInt("CourseNumber");
                String CourseNum = Integer.toString(CourseNumber_col);
                String CName = rs.getString("Course_Name");
                String Teacher = rs.getString("Teacher_Name");
                int studentid_col = rs.getInt("student_ID");
                String ID = Integer.toString(studentid_col);
                String Student = rs.getString("Student_Name");
            
                textCourseNum.setText(CourseNum);
                textCourseName.setText(CName);
                textTeacher.setText(Teacher);
                textStudentID.setText(ID);
                textStudentName.setText(Student); 
            }
            else {
                rs.previous();
                JOptionPane.showMessageDialog(CourseScheduling.this, "End of File");
            }
        } 
        catch (SQLException err) {
            JOptionPane.showMessageDialog(CourseScheduling.this, err.getMessage());
        }
         
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        try {
            if (rs.previous()) {
                //get new information to match the student's courses
                int CourseNumber_col = rs.getInt("CourseNumber");
                String CourseNum = Integer.toString(CourseNumber_col);
                String CName = rs.getString("Course_Name");
                String Teacher = rs.getString("Teacher_Name");
                int studentid_col = rs.getInt("student_ID");
                String ID = Integer.toString(studentid_col);
                String Student = rs.getString("Student_Name");
            
                textCourseNum.setText(CourseNum);
                textCourseName.setText(CName);
                textTeacher.setText(Teacher);
                textStudentID.setText(ID);
                textStudentName.setText(Student); 
            }
            else {
                rs.next();
                JOptionPane.showMessageDialog(CourseScheduling.this, "End of File");
            }  
        } 
        catch (SQLException err) {
            JOptionPane.showMessageDialog(CourseScheduling.this, err.getMessage());
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        try {
            //get new information to match the first student's courses

            rs.first();
            int CourseNumber_col = rs.getInt("CourseNumber");
            String CourseNum = Integer.toString(CourseNumber_col);
            String CName = rs.getString("Course_Name");
            String Teacher = rs.getString("Teacher_Name");
            int studentid_col = rs.getInt("student_ID");
            String ID = Integer.toString(studentid_col);
            String Student = rs.getString("Student_Name");
            
            textCourseNum.setText(CourseNum);
            textCourseName.setText(CName);
            textTeacher.setText(Teacher);
            textStudentID.setText(ID);
            textStudentName.setText(Student); 
           
        } 
        catch (SQLException err) {
            JOptionPane.showMessageDialog(CourseScheduling.this, err.getMessage());
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            //get new information to match the last student's courses
            rs.last();
            int CourseNumber_col = rs.getInt("CourseNumber");
            String CourseNum = Integer.toString(CourseNumber_col);
            String CName = rs.getString("Course_Name");
            String Teacher = rs.getString("Teacher_Name");
            int studentid_col = rs.getInt("student_ID");
            String ID = Integer.toString(studentid_col);
            String Student = rs.getString("Student_Name");
            
            textCourseNum.setText(CourseNum);
            textCourseName.setText(CName);
            textTeacher.setText(Teacher);
            textStudentID.setText(ID);
            textStudentName.setText(Student); 
           
        } 
        catch (SQLException err) {
            JOptionPane.showMessageDialog(CourseScheduling.this, err.getMessage());
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
            String CourseNum = textCourseNum.getText();
            String CName = textCourseName.getText();
            String Teacher = textTeacher.getText();
            String ID = textStudentID.getText();
            String Student = textStudentName.getText();
            
            int newID = Integer.parseInt( ID );
            int newCourseNum = Integer.parseInt(CourseNum);
            
            //replace the old text values with new text values
            try {
                rs.updateInt( "student_ID", newID );
                rs.updateString( "Student_Name", Student );
                rs.updateString( "Teacher_Name", Teacher );
                rs.updateString( "Course_Name", CName );
                rs.updateInt( "CourseNumber", newCourseNum);
                rs.updateRow( );
                JOptionPane.showMessageDialog(CourseScheduling.this, "Updated");
            }
            catch (SQLException err) {
                System.out.println(err.getMessage() );
            }


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        try {
            curRow = rs.getRow( );
            //create a new blank row, set values to blank values
            textStudentName.setText("");
            textStudentID.setText("");
            textCourseName.setText("");
            textCourseNum.setText("");
            textTeacher.setText("");

            btnFirst.setEnabled( false );
            btnPrevious.setEnabled( false ) ;
            btnNext.setEnabled( false );
            btnLast.setEnabled( false );
            btnUpdate.setEnabled( false );
            btnDelete.setEnabled( false );
            btnNew.setEnabled( false );
            //enable the buttons below
            btnSave.setEnabled( true );
            btnCancel.setEnabled( true );
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(this, err.getMessage());

        }
        
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        try {
            //retrieve values
            rs.absolute(curRow);
            //reload the erased values
            btnFirst.setEnabled( true );
            btnPrevious.setEnabled( true ) ;
            btnNext.setEnabled( true );
            btnLast.setEnabled( true );
            btnUpdate.setEnabled( true );
            btnDelete.setEnabled( true );
            btnNew.setEnabled( true );

            btnSave.setEnabled( false );
            btnCancel.setEnabled( false );
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(this, err.getMessage());

        }
        
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String CourseNum = textCourseNum.getText();
        String CName = textCourseName.getText();
        String Teacher = textTeacher.getText();
        String ID = textStudentID.getText();
        String Student = textStudentName.getText();
        
        int newID = Integer.parseInt(ID);
        int newCourseNum = Integer.parseInt(CourseNum);

        
        try {
            rs.moveToInsertRow();
            //update the new values
            rs.updateInt( "student_ID", newID );
            rs.updateString( "Student_Name", Student );
            rs.updateString( "Teacher_Name", Teacher );
            rs.updateString( "Course_Name", CName );
            rs.updateInt( "CourseNumber", newCourseNum);
      
            
            rs.insertRow();
            
            stmt.close();
            rs.close();
            
            stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            String SQL = "SELECT * FROM CourseScheduling";
            rs =stmt.executeQuery(SQL);
            
            rs.next();
            
            int CourseNumber_col = rs.getInt("CourseNumber");
            String CourseNum2 = Integer.toString(CourseNumber_col);
            String CName2 = rs.getString("Course_Name");
            String Teacher2 = rs.getString("Teacher_Name");
            int studentid_col = rs.getInt("student_ID");
            String StudentID = Integer.toString(studentid_col);
            String Student2 = rs.getString("Student_Name");
            //new placeholders
            textCourseNum.setText(CourseNum2);
            textCourseName.setText(CName2);
            textTeacher.setText(Teacher2);
            textStudentID.setText(StudentID);
            textStudentName.setText(Student2); 
            
            btnFirst.setEnabled( false );
            btnPrevious.setEnabled( false ) ;
            btnNext.setEnabled( false );
            btnLast.setEnabled( false );
            btnUpdate.setEnabled( false );
            btnDelete.setEnabled( false );
            btnNew.setEnabled( false );

            btnSave.setEnabled( true );
            btnCancel.setEnabled( true );
            
            JOptionPane.showMessageDialog(this, "Record Saved");
            
            
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(this, err.getMessage());
        }
       
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            //delete the specific record
            rs.deleteRow();
            
            stmt.close();
            rs.close();
            //connection to HS classes database
            stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            String SQL = "SELECT * FROM CourseScheduling";
            rs = stmt.executeQuery(SQL);
            
            rs.next();
            
            int CourseNumber_col = rs.getInt("CourseNumber");
            String CourseNum = Integer.toString(CourseNumber_col);
            String CName = rs.getString("Course_Name");
            String Teacher = rs.getString("Teacher_Name");
            int studentid_col = rs.getInt("student_ID");
            String ID = Integer.toString(studentid_col);
            String Student = rs.getString("Student_Name");
            //set new values for record after the deleted record 
            textCourseNum.setText(CourseNum);
            textCourseName.setText(CName);
            textTeacher.setText(Teacher);
            textStudentID.setText(ID);
            textStudentName.setText(Student); 
            
            JOptionPane.showMessageDialog(this, "Record Deleted");
            
        }
        catch (SQLException err) {
            JOptionPane.showMessageDialog(this, err.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseScheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseScheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseScheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseScheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseScheduling().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton displayBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField textCourseName;
    private javax.swing.JTextField textCourseNum;
    private javax.swing.JTextField textStudentID;
    private javax.swing.JTextField textStudentName;
    private javax.swing.JTextField textTeacher;
    // End of variables declaration//GEN-END:variables
}
